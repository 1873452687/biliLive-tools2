name: Build/release Electron app

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  release:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    env:
      is_tag: ${{ startsWith(github.ref, 'refs/tags/') }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: pnpm-update-for-win
        if: startsWith(matrix.os, 'windows')
        run: node ./scripts/github-ci-pnpm-update.js

      - name: Install dependencies
        run: pnpm install

      - name: install-deps-for-better-sqlite3
        run: node ./scripts/github-ci-better-sqlite3.js

      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\electron\Cache
          key: ${{ runner.os }}-electron-cache-${{ hashFiles(format('{0}{1}', github.workspace, '/pnpm-lock.yaml')) }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Cache Electron-Builder
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\electron-builder\Cache
          key: ${{ runner.os }}-electron-builder-cache-${{ hashFiles(format('{0}{1}', github.workspace, '/pnpm-lock.yaml')) }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-cache-

      - name: Install binary deps
        run: pnpm run install:bin

      - name: build
        run: pnpm run build:app

      - name: build-cli-win
        if: startsWith(matrix.os, 'windows')
        run: pnpm run build:cli && pnpm run --filter bililive-cli zip:win

      - name: build-cli-linux
        if: startsWith(matrix.os, 'ubuntu')
        run: pnpm run build:cli && pnpm run --filter bililive-cli zip:linux

      # - name: remove ffmpeg.exe
      #   if: startsWith(matrix.os, 'windows')
      #   uses: JesseTG/rm@v1.0.3
      #   with:
      #     path: packages\app\resources\bin\ffmpeg.exe

      # - name: remove ffprobe.exe
      #   if: startsWith(matrix.os, 'windows')
      #   uses: JesseTG/rm@v1.0.3
      #   with:
      #     path: packages\app\resources\bin\ffprobe.exe

      # - name: build-win-no-ffmpeg
      #   if: startsWith(matrix.os, 'windows')
      #   run: pnpm run buid:win:app

      - name: release
        if: env.is_tag == 'true'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifactErrorsFailBuild: false
          artifacts: "packages/app/dist/*.exe,packages/app/dist/*.zip,packages/app/dist/*.deb,packages/app/dist/*.snap,packages/CLI/dist/*.zip"
          replacesArtifacts: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload win artifact
        if: startsWith(matrix.os, 'windows') && env.is_tag == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: Windows
          path: |
            packages/app/dist/*.exe
            packages/app/dist/*.zip
            packages/CLI/dist/*.zip
            packages/CLI/dist/*.exe

      - name: Upload linux artifact
        if: startsWith(matrix.os, 'ubuntu') && env.is_tag == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: Linux
          path: |
            packages/app/dist/*.deb
            packages/app/dist/*.snap
            packages/app/dist/*.zip
            packages/CLI/dist/*.zip
permissions:
  contents: write
